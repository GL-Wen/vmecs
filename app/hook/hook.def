HOOK(connect, int, (int fd, const struct sockaddr *addr, socklen_t addrlen), {
    int socktype;
    socklen_t optlen;

    uint32_t ip;
    uint16_t port;

    socks5_tcp_socket_t *sock;

    target_id_t *proxy;
    target_id_t *target;

    optlen = sizeof(socktype);
    getsockopt(fd, SOL_SOCKET, SO_TYPE, &socktype, &optlen);

    if (!proxy_on ||
        addr->sa_family != AF_INET ||
        socktype != SOCK_STREAM) {
        return REAL_FUNC(connect)(fd, addr, addrlen);
    }

    ip = ((struct sockaddr_in *)addr)->sin_addr.s_addr;
    port = from_be16(((struct sockaddr_in *)addr)->sin_port);

    proxy_on = false;

    proxy = target_id_new_ipv4((byte_t []) { 127, 0, 0, 1 }, 3133);
    target = target_id_new_ipv4((byte_t *)&ip, port);
    sock = socks5_tcp_socket_new();

    socks5_tcp_socket_set_proxy(sock, proxy);

    if (tcp_socket_connect_target(sock, target)) {
        perror("failed to connect to proxy");
        TRACE("fallback to old connect");

        proxy_on = true;

        tcp_socket_close(sock);
        tcp_socket_free(sock);

        target_id_free(proxy);
        target_id_free(target);

        return REAL_FUNC(connect)(fd, addr, addrlen);
    }

    TRACE("connected");

    proxy_on = true;

    target_id_free(proxy);
    target_id_free(target);

    // substitute the original fd
    dup2(socks5_to_socket(sock), fd);

    return 0;
})
