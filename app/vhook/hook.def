HOOK(connect, fd_t, (fd_t fd, const struct sockaddr *addr, socklen_t addrlen), {
    fd_t fake_fd;
    int flags;
    int fake_flags;
    int socktype;
    socklen_t optlen;

    uint32_t ip;
    uint16_t port;

    socks_tcp_socket_t *sock;

    target_id_t *target;

    optlen = sizeof(socktype);
    getsockopt(fd, SOL_SOCKET, SO_TYPE, &socktype, &optlen);

    if (!proxy_on ||
        addr->sa_family != AF_INET ||
        socktype != SOCK_STREAM) {
        return REAL_FUNC(connect)(fd, addr, addrlen);
    }

    ip = ((struct sockaddr_in *)addr)->sin_addr.s_addr;
    port = from_be16(((struct sockaddr_in *)addr)->sin_port);

    proxy_on = false;

    // proxy = target_id_new_ipv4((byte_t []) { 127, 0, 0, 1 }, 3133);
    target = target_id_new_ipv4((byte_t *)&ip, port);
    sock = socks_tcp_socket_new(SOCKS_VERSION_ANY);

    socks_tcp_socket_set_proxy(sock, target_proxy);

    if (tcp_socket_connect_target(sock, target)) {
        perror("failed to connect to proxy");
        // TRACE("fallback to old connect");
        proxy_on = true;

        tcp_socket_close(sock);
        tcp_socket_free(sock);

        target_id_free(target);

        return -1;
    }

    print_target("connected", target);

    proxy_on = true;

    target_id_free(target);

    // substitute the original fd

    fake_fd = socks_to_socket(sock);

    flags = fcntl(fd, F_GETFL, 0);
    fake_flags = fcntl(fake_fd, F_GETFL, 0);

    if (flags == -1 || fake_flags == -1) {
        TRACE("unable to get fd flags");
        return -1;
    }

    if (flags & O_NONBLOCK) {
        fcntl(fake_fd, F_SETFL, fake_flags | O_NONBLOCK);
    }

    dup2(fake_fd, fd);

    return 0;
})
